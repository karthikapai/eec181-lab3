module scrolling_name(
    input clock,
    input reset,
    output a,
    output b,
    output c,
    output d,
    output e,
    output f,
    output g,
    output dp,
    output [3:0] an
    );
 
reg [28:0] ticker; //to hold a count of 50M
wire click;
reg [5:0] sixth, fifth, fourth, third, second, first; // registers to hold the LED values
 
always @ (posedge clock or posedge reset) //always block for the ticker
begin
 if(reset)
  ticker <= 0;
 else if(ticker == 50000000) //reset after 1 second
  ticker <= 0;
 else
  ticker <= ticker + 1;
end
 
reg [3:0] clickcount; //register to hold the count upto 9. That is why a 4 bit register is used. 3 bit would not have been enough.
 
assign click = ((ticker == 50000000)?1'b1:1'b0); //click every second
 
always @ (posedge click or posedge reset)
begin
 if(reset)
  clickcount <= 0;
 else if(clickcount == 12)
   clickcount <= 0;
  else
  clickcount <= clickcount + 1;
 
end
 
always @ (*) //always block that will scroll or move the text. Accomplished with case
begin
    case(clickcount)
    0:
    begin
     sixth = 4;
     fifth = 3;
     fourth = 7; 
     third = 7; 
     second = 0; 
     first = default; 
    end
     
   1:
    begin
     sixth = 3;
     fifth = 7;
     fourth = 7; 
     third = 0; 
     second = default; 
     first = 9; 
    end
     
    2:
    begin
     sixth = 7;
     fifth = 7;
     fourth = 0; 
     third = default; 
     second = 9; 
     first = 9; 
    end
     
    3:
    begin
     sixth = 7;
     fifth = 0;
     fourth = default; 
     third = 9; 
     second = 9; 
     first = 0; 
    end
     
    4:
    begin
     sixth = 0;
     fifth = default;
     fourth = 9; 
     third = 9; 
     second = 0; 
     first = 8; 
    end
     
    5:
    begin
     sixth = default;
     fifth = 9;
     fourth = 9; 
     third = 0; 
     second = 8; 
     first = 7; 
    end
     
   6:
    begin
     sixth = 9;
     fifth = 9;
     fourth = 0; 
     third = 8; 
     second = 7; 
     first = 5; 
    end
     
    7:
    begin
     sixth = 9;
     fifth = 0;
     fourth = 8; 
     third = 7; 
     second = 5; 
     first = 4; 
    end
     
    8:
    begin
     sixth = 0;
     fifth = 8;
     fourth = 7; 
     third = 5; 
     second = 4; 
     first = 3; 
    end

    9:
    begin
     sixth = 8;
     fifth = 7;
     fourth = 5; 
     third = 4; 
     second = 3; 
     first = 7; 
    end

   10:
    begin
     sixth = 7;
     fifth = 5;
     fourth = 4; 
     third = 3; 
     second = 7; 
     first = 7; 
    end

    11:
    begin
     sixth = 5;
     fifth = 4;
     fourth = 3; 
     third = 7; 
     second = 7; 
     first = 0; 
    end

    end
  endcase
   
end
 
//see my other post on explanation of LED multiplexing.
 
localparam N = 18;
 
reg [N-1:0]count;
 
always @ (posedge clock or posedge reset)
 begin
  if (reset)
   count <= 0;
  else
   count <= count + 1;
 end
 
reg [6:0]sseg;
reg [3:0]an_temp;
 
always @ (*)
 begin
  case(count[N-1:N-2])
    
   2'b00 :
    begin
     sseg = first;
     an_temp = 4'b1110;
    end
    
   2'b01:
    begin
     sseg = second;
     an_temp = 4'b1101;
    end
    
   2'b10:
    begin
     sseg = third;
     an_temp = 4'b1011;
    end
     
   2'b11:
    begin
     sseg = fourth;
     an_temp = 4'b0111;
    end
  endcase
 end
assign an = an_temp;
 
reg [6:0] sseg_temp;
always @ (*)
 begin
  case(sseg) //active low
   4 : sseg_temp = 7'b0001001; //to display H
   3 : sseg_temp = 7'b0000110; //to display E
   7 : sseg_temp = 7'b1000111; //to display L
   0 : sseg_temp = 7'b1000000; //to display O
   8 : sseg_temp = 7'b0001000; //to display R
   5 : sseg_temp = 7'b0100001; //to display D
   9 : sseg_temp = 7'b1000001; //to display U
    
   default : sseg_temp = 7'b1111111; //blank //space
  endcase
 end
assign {g, f, e, d, c, b, a} = sseg_temp;
assign dp = 1'b1;
 
- See more at: http://simplefpga.blogspot.co.uk/2012/12/scrolling-or-moving-text-using-7.html#sthash.yaS8O0L3.dpuf
